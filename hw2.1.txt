#include <iostream>
using namespace std;

struct Node
{
	int data;
	Node* next;
	Node(int s, Node* m = nullptr)
	{
		data = s;
		next = m;
	}
};

void addnodeA(Node*& A, int val)
{
	if (A == nullptr)
	{
		A = new Node(val, nullptr);
	}

	Node* temp = A;
	while (temp->next != nullptr)
	{
		temp = temp->next;
	}
	temp->next = new Node(val);
}

void addnodeB(Node*& B, int val)
{
	if (B == nullptr)
	{
		B = new Node(val, nullptr);
	}

	Node* temp = B;
	while (temp->next != nullptr)
	{
		temp = temp->next;
	}
	temp->next = new Node(val);
}

void Concatenate_Lists(Node* A, Node* B,Node* head)
{
	if (A != NULL && B != NULL)
	{
		if (A->next == NULL)
			A->next = B;
		else
			Concatenate_Lists(A->next, B, head);
	}

	Node* temp = head;
	while (temp->next != nullptr)
	{
		cout << temp->data << endl;
		temp = temp->next;
	}
	cout << temp->data << endl;
}

void printlist(Node* head)
{
	if (head == nullptr)
	{
		cout << endl;
	}
	else
	{
		Node* temp = head;
		while (temp->next != nullptr)
		{
			cout << temp->data << " ";
			temp = temp->next;
		}
		cout << temp->data << " ";
	}
}

int main() {

	Node* head = new Node(4);
	Node* A = new Node(6);
	Node* B = new Node(3);

	addnodeA(head, 6);
	addnodeB(head, 3);
	addnodeB(head, 7);
	addnodeB(head, 12);
	Concatenate_Lists(A,B, head);


	system("pause");
	return 0;
}